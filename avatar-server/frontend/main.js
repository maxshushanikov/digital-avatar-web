// digital_avatar/avatar-server/frontend/src/main.js
// --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
window.chatHandlers = {};
window.uiHandlers = {};

// --- –ò–º–ø–æ—Ä—Ç—ã ---
import { initScene } from './modules/scene/SceneManager.js';
import { AudioManager } from './modules/audio/AudioManager.js';
import { AvatarController } from './modules/avatar/AvatarController.js';
import { setupUI } from './components/UiControls/UiControls.js';
import { setupChat } from './components/Chat/Chat.js';

// --- –•—Ä–∞–Ω–∏–ª–∏—â–∞ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ) ---
import { sessionState, chatState, connectionState } from './stores/session.js';
import { avatarState } from './stores/avatar.js';
import { audioState } from './stores/audio.js';

// --- –£—Ç–∏–ª–∏—Ç—ã ---
import { ErrorHandler } from './utils/error-handler.js';
import { PerformanceMonitor } from './utils/performance.js';

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫ ---
ErrorHandler.setupGlobalHandlers();

// --- –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
window.app = {
  scene: null,
  avatar: null,
  audio: null,
  stores: {
    session: sessionState,
    chat: chatState,
    connection: connectionState,
    avatar: avatarState,
    audio: audioState
  }
};

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
async function initApp() {
  // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  if (window.app.initialized) return;
  window.app.initialized = true;

  try {
    sessionState.set('connecting');
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');

    // --- 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω—ã ---
    const canvas = document.getElementById('scene');
    if (!canvas) throw new Error('Canvas element not found');

    const sceneManager = await initScene(canvas, '/assets/avatar.glb');
    window.app.scene = sceneManager;

    // --- 2. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∞–≤–∞—Ç–∞—Ä–∞ ---
    const avatarController = new AvatarController(
      sceneManager.avatar,
      sceneManager.mixer,
      sceneManager.THREE
    );
    window.app.avatar = avatarController;
    window.avatarController = avatarController; // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

    // --- 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ---
    const audioManager = new AudioManager();
    window.app.audio = audioManager;

    // --- 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–∞—Ç–∞ ---
    window.chatHandlers.onSubmit = createChatSubmitHandler(audioManager, avatarController);

    // --- 5. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI –∏ —á–∞—Ç–∞ ---
    setupUI({
      onSubmit: window.chatHandlers.onSubmit,
      onMicToggle: createMicHandler(audioManager, avatarController),
      onWebcamToggle: createWebcamHandler(),
      onCallToggle: createCallHandler()
    });

    setupChat();

    // --- 6. –ó–∞–ø—É—Å–∫ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ ---
    startAnimationLoop(sceneManager, avatarController);

    // --- 7. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ---
    PerformanceMonitor.init();

    // --- 8. –°–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ---
    sessionState.set('connected');
    console.log('‚úÖ Digital Avatar App initialized successfully');

  } catch (error) {
    handleError(error);
  }
}

/**
 * –°–æ–∑–¥–∞—ë—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function createChatSubmitHandler(audioManager, avatarController) {
  return async function onSubmit(text) {
    chatState.setKey('isSending', true);
    
    try {
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          session_id: 'default',
          message: text,
          model: 'llama3'
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
      const messages = [...chatState.get().messages];
      messages.push({
        role: 'assistant',
        content: data.text,
        timestamp: Date.now()
      });
      chatState.setKey('messages', messages);

      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
      if (data.audio_url) {
        window.app.stores.avatar.setKey('isSpeaking', true);
        try {
          await audioManager.playAudio(data.audio_url);
        } finally {
          window.app.stores.avatar.setKey('isSpeaking', false);
        }
      }

    } catch (error) {
      console.error('Chat error:', error);
      const messages = [...chatState.get().messages];
      messages.push({
        role: 'assistant',
        content: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.',
        timestamp: Date.now()
      });
      chatState.setKey('messages', messages);
    } finally {
      chatState.setKey('isSending', false);
    }
  };
}

/**
 * –°–æ–∑–¥–∞—ë—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
 */
function createMicHandler(audioManager, avatarController) {
  return async function onMicToggle(active) {
    if (active) {
      try {
        const analyser = await audioManager.startRecording();
        avatarController.lipSync.start(analyser);
        window.app.stores.avatar.setKey('isSpeaking', true);
      } catch (error) {
        console.error('Microphone error:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.');
      }
    } else {
      await audioManager.stopRecording();
      avatarController.lipSync.stop();
      window.app.stores.avatar.setKey('isSpeaking', false);
    }
  };
}

/**
 * –°–æ–∑–¥–∞—ë—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±-–∫–∞–º–µ—Ä—ã
 */
function createWebcamHandler() {
  return async function onWebcamToggle(active) {
    connectionState.setKey('isWebcamActive', active);
    if (active) {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ video: true });
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤–∏–¥–µ–æ
      } catch (error) {
        console.error('Webcam error:', error);
        connectionState.setKey('isWebcamActive', false);
      }
    }
  };
}

/**
 * –°–æ–∑–¥–∞—ë—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞
 */
function createCallHandler() {
  return async function onCallToggle(active) {
    connectionState.setKey('isCallActive', active);
    connectionState.setKey('isCallConnecting', true);
    
    try {
      if (active) {
        const stream = await navigator.mediaDevices.getUserMedia({ 
          video: true, 
          audio: true 
        });
        console.log('üìû –í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫ –Ω–∞—á–∞—Ç...');
      } else {
        console.log('üìû –í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω.');
      }
    } catch (error) {
      console.error('Video call error:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫.');
    } finally {
      connectionState.setKey('isCallConnecting', false);
    }
  };
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞—Ç–∞–ª—å–Ω–æ–π –æ—à–∏–±–∫–∏
 */
function handleError(error) {
  console.error('Failed to initialize app:', error);
  sessionState.set('error');

  const errorMessage = document.createElement('div');
  errorMessage.style.cssText = `
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: rgba(255, 107, 107, 0.9);
    color: white;
    padding: 20px;
    border-radius: 10px;
    text-align: center;
    z-index: 1000;
    max-width: 80%;
  `;
  errorMessage.innerHTML = `
    <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
    <p>${error.message}</p>
    <button onclick="location.reload()" style="
      margin-top: 15px;
      padding: 10px 20px;
      background: white;
      color: #ff6b6b;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    ">–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å</button>
  `;
  document.body.appendChild(errorMessage);
}

/**
 * –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
 */
function startAnimationLoop(sceneManager, avatarController) {
  const clock = new sceneManager.THREE.Clock();
  
  function animate() {
    requestAnimationFrame(animate);
    
    const deltaTime = clock.getDelta();
    avatarController.update(deltaTime);
    
    sceneManager.controls.update();
    sceneManager.renderer.render(sceneManager.scene, sceneManager.camera);
    
    PerformanceMonitor.updateRenderMetrics(sceneManager.renderer);
  }
  
  animate();
}

// --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initApp);
} else {
  initApp();
}