// digital_avatar/avatar-server/frontend/modules/ui.js

export function setupUI({ onSubmit, onMicText, onWebcamToggle, onCallToggle }) {
  const input = document.getElementById('textInput');
  const sendBtn = document.getElementById('sendBtn');
  const micBtn = document.getElementById('micBtn');
  const emojiSelect = document.getElementById('emojiSelect');
  const webcamBtn = document.getElementById('webcamBtn');
  const callBtn = document.getElementById('callBtn');

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const state = {
    sttActive: false,
    sttInitialized: false,
    sttError: null,
    webcamActive: false,
    callActive: false,
    callConnecting: false,
    audioDevices: []
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º (HTTPS –∏–ª–∏ localhost)
  const isSecureContext = () => {
    return location.protocol === 'https:' || 
           location.hostname === 'localhost' || 
           location.hostname === '127.0.0.1';
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Web Speech API
  const isSpeechRecognitionSupported = () => {
    return 'webkitSpeechRecognition' in window || 'SpeechRecognition' in window;
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
  const isRussianLanguageSupported = () => {
    if (!isSpeechRecognitionSupported()) return false;
    
    try {
      const SR = window.SpeechRecognition || window.webkitSpeechRecognition;
      const recognition = new SR();
      recognition.lang = 'ru-RU';
      return true;
    } catch (e) {
      return false;
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤
  const getAudioDevices = async () => {
    try {
      await navigator.mediaDevices.getUserMedia({ audio: true });
      const devices = await navigator.mediaDevices.enumerateDevices();
      return devices.filter(device => device.kind === 'audioinput');
    } catch (err) {
      console.error('Error getting audio devices:', err);
      return [];
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω
  const isMicrophoneAvailable = async () => {
    try {
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      stream.getTracks().forEach(track => track.stop());
      return true;
    } catch (err) {
      return false;
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
  const updateMicButton = () => {
    // –ï—Å–ª–∏ STT –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (!isSpeechRecognitionSupported() || !isSecureContext()) {
      micBtn.textContent = 'üéôÔ∏è STT unavailable';
      micBtn.disabled = true;
      
      if (!isSecureContext()) {
        micBtn.title = 'Web Speech API requires HTTPS (except localhost)';
      } else {
        micBtn.title = 'Speech Recognition API not supported by your browser';
      }
      
      return;
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞
    if (state.sttError) {
      micBtn.textContent = 'üéôÔ∏è STT error';
      micBtn.disabled = false;
      micBtn.title = state.sttError;
      return;
    }
    
    // –ï—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    if (!state.sttInitialized) {
      micBtn.textContent = 'üéôÔ∏è Initialize';
      micBtn.disabled = false;
      micBtn.title = 'Click to initialize speech recognition';
      return;
    }
    
    // –ê–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    micBtn.disabled = false;
    micBtn.title = '';
    micBtn.textContent = state.sttActive ? 'üõë Stop' : 'üéôÔ∏è Speak';
    micBtn.classList.toggle('active', state.sttActive);
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –≤–µ–±-–∫–∞–º–µ—Ä—ã
  const updateWebcamButton = () => {
    webcamBtn.textContent = state.webcamActive ? 'üì∑ Off' : 'üì∑ Webcam';
    webcamBtn.classList.toggle('active', state.webcamActive);
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –∑–≤–æ–Ω–∫–∞
  const updateCallButton = () => {
    if (state.callConnecting) {
      callBtn.textContent = 'üìπ Connecting...';
      callBtn.disabled = true;
    } else {
      callBtn.textContent = state.callActive ? 'üìπ Disconnect' : 'üìπ Video Call';
      callBtn.disabled = false;
    }
    callBtn.classList.toggle('active', state.callActive);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
  function setLoadingState(loading) {
    sendBtn.disabled = loading;
    micBtn.disabled = loading || !state.sttInitialized || state.callConnecting;
    input.disabled = loading;
    sendBtn.textContent = loading ? '‚è≥' : 'Send';
  }

  const handleSubmit = async () => {
    if (input.value.trim()) {
      setLoadingState(true);
      try {
        await onSubmit(input.value.trim());
        input.value = '';
      } catch (err) {
        console.error('Error submitting message:', err);
      } finally {
        setLoadingState(false);
      }
    }
  };

  sendBtn.onclick = handleSubmit;
  input.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' && input.value.trim()) {
      handleSubmit();
    }
  });

  emojiSelect.onchange = () => { 
    if (emojiSelect.value) {
      onEmoji(emojiSelect.value);
      emojiSelect.value = '';
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è STT –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
  const initSpeechRecognition = async () => {
    // –£–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
    if (state.sttInitialized) return;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if (!isSecureContext()) {
      state.sttError = 'Web Speech API requires HTTPS (except localhost)';
      updateMicButton();
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Web Speech API
    if (!isSpeechRecognitionSupported()) {
      state.sttError = 'Web Speech API not supported by your browser. Try Chrome or Edge.';
      updateMicButton();
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    if (!isRussianLanguageSupported()) {
      state.sttError = 'Russian language not supported by Web Speech API in your browser';
      updateMicButton();
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤
    state.audioDevices = await getAudioDevices();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    const isAvailable = await isMicrophoneAvailable();
    if (!isAvailable) {
      state.sttError = 'Microphone is busy or not available. Close other apps using microphone.';
      updateMicButton();
      return;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
    const SR = window.SpeechRecognition || window.webkitSpeechRecognition;
    const recognition = new SR();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    const langs = ['ru-RU', 'ru'];
    let supportedLang = null;
    
    for (const lang of langs) {
      try {
        recognition.lang = lang;
        supportedLang = lang;
        break;
      } catch (e) {
        continue;
      }
    }
    
    if (!supportedLang) {
      state.sttError = 'Russian language not supported by Web Speech API';
      updateMicButton();
      return;
    }

    recognition.lang = supportedLang;
    recognition.interimResults = true;
    recognition.maxAlternatives = 1;
    recognition.continuous = false;

    recognition.onresult = (e) => {
      const transcript = Array.from(e.results)
        .map(result => result[0])
        .map(result => result.transcript)
        .join('');
      
      input.value = transcript;
      if (e.results[0].isFinal) {
        handleSubmit();
      }
    };

    recognition.onerror = (e) => {
      console.error('STT error:', e.error);
      
      state.sttActive = false;
      updateMicButton();
      
      if (e.error === 'audio-capture') {
        state.sttError = 'Microphone is busy or not available. Close other apps using microphone.';
      } else if (e.error === 'not-allowed') {
        state.sttError = 'Microphone access denied. Please allow access in browser settings.';
      } else if (e.error === 'service-not-allowed') {
        state.sttError = 'Speech recognition service is unavailable.';
      }
      
      updateMicButton();
    };

    recognition.onend = () => {
      if (state.sttActive) {
        state.sttActive = false;
        updateMicButton();
      }
    };

    // –£—Å–ø–µ—à–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    state.sttInitialized = true;
    state.sttError = null;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
    micBtn.onclick = async () => {
      if (!state.sttActive) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
        const isAvailable = await isMicrophoneAvailable();
        if (!isAvailable) {
          state.sttError = 'Microphone is busy. Close other apps using microphone.';
          updateMicButton();
          return;
        }
        
        try {
          state.sttActive = true;
          updateMicButton();
          
          recognition.start();
        } catch (e) {
          console.error('Error starting recognition:', e);
          state.sttActive = false;
          state.sttError = `Error starting: ${e.message}`;
          updateMicButton();
        }
      } else {
        recognition.stop();
      }
    };
    
    updateMicButton();
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º STT –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
  micBtn.onclick = initSpeechRecognition;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥–≤–æ–π–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
  callBtn.onclick = async () => {
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    if (state.callConnecting) return;
    
    if (state.callActive) {
      // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
      state.callActive = false;
      state.callConnecting = true;
      updateCallButton();
      
      try {
        await onCallToggle(false);
      } catch (err) {
        console.error('Video call disconnect error:', err);
        state.callActive = true; // Restore state
      } finally {
        state.callConnecting = false;
        updateCallButton();
      }
    } else {
      // Attempt connection
      state.callActive = true;
      state.callConnecting = true;
      updateCallButton();
      
      try {
        await onCallToggle(true);
      } catch (err) {
        console.error('Video call error:', err);
        state.callActive = false;
        alert('Could not establish video call.\n\nCheck console for details.');
      } finally {
        state.callConnecting = false;
        updateCallButton();
      }
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–∫–∞–º–µ—Ä—ã
  webcamBtn.onclick = async () => { 
    if (state.callActive) {
      alert('Cannot enable webcam during a call');
      return;
    }
    
    state.webcamActive = !state.webcamActive;
    updateWebcamButton();
    await onWebcamToggle(state.webcamActive); 
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
  updateMicButton();
  updateWebcamButton();
  updateCallButton();
}