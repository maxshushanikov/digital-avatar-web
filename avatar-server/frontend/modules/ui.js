// digital_avatar/avatar-server/frontend/modules/ui.js

export function setupUI({ onSubmit, onMicText, onEmoji, onWebcamToggle, onCallToggle }) {
  const input = document.getElementById('textInput');
  const sendBtn = document.getElementById('sendBtn');
  const micBtn = document.getElementById('micBtn');
  const emojiSelect = document.getElementById('emojiSelect');
  const webcamBtn = document.getElementById('webcamBtn');
  const callBtn = document.getElementById('callBtn');

  // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  let wsConnecting = false;

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const state = {
    sttActive: false,
    webcamActive: false,
    callActive: false
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
  const updateMicButton = () => {
    micBtn.textContent = state.sttActive ? 'üõë –°—Ç–æ–ø' : 'üéôÔ∏è –ì–æ–≤–æ—Ä–∏—Ç—å';
    micBtn.classList.toggle('active', state.sttActive);
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –≤–µ–±-–∫–∞–º–µ—Ä—ã
  const updateWebcamButton = () => {
    webcamBtn.textContent = state.webcamActive ? 'üì∑ –í—ã–∫–ª' : 'üì∑ –í–µ–±-–∫–∞–º–µ—Ä–∞';
    webcamBtn.classList.toggle('active', state.webcamActive);
  };

  // –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–≤–æ–Ω–∫–∞
  const updateCallButton = () => {
    if (state.callActive && wsConnecting) {
      callBtn.textContent = 'üìπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
    } else {
      callBtn.textContent = state.callActive ? 'üìπ –û—Ç–∫–ª—é—á–∏—Ç—å' : 'üìπ –í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫';
    }
    callBtn.classList.toggle('active', state.callActive);
    callBtn.disabled = wsConnecting && state.callActive;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const setWsConnecting = (isConnecting) => {
    wsConnecting = isConnecting;
    updateCallButton();
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
  function setLoadingState(loading) {
    sendBtn.disabled = loading;
    micBtn.disabled = loading;
    input.disabled = loading;
    sendBtn.textContent = loading ? '‚è≥' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å';
  }

  const handleSubmit = async () => {
    if (input.value.trim()) {
      setLoadingState(true);
      try {
        await onSubmit(input.value.trim());
        input.value = '';
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:', err);
      } finally {
        setLoadingState(false);
      }
    }
  };

  sendBtn.onclick = handleSubmit;
  input.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' && input.value.trim()) {
      handleSubmit();
    }
  });

  emojiSelect.onchange = () => { 
    if (emojiSelect.value) {
      onEmoji(emojiSelect.value);
      emojiSelect.value = '';
    }
  };

  let recognition;
  if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
    const SR = window.SpeechRecognition || window.webkitSpeechRecognition;
    recognition = new SR();
    recognition.lang = 'ru-RU';
    recognition.interimResults = true;
    recognition.maxAlternatives = 1;

    recognition.onresult = (e) => {
      const transcript = Array.from(e.results)
        .map(result => result[0])
        .map(result => result.transcript)
        .join('');
      
      input.value = transcript;
      if (e.results[0].isFinal) {
        handleSubmit();
      }
    };

    recognition.onerror = (e) => {
      console.error('STT error:', e.error);
      if (e.error === 'not-allowed') {
        alert('–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞');
      }
      state.sttActive = false;
      updateMicButton();
    };

    recognition.onend = () => {
      state.sttActive = false;
      updateMicButton();
    };
  } else {
    micBtn.disabled = true;
    micBtn.title = 'STT –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —ç—Ç–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º';
  }

  micBtn.onclick = () => {
    if (!recognition) return;
    
    if (!state.sttActive) {
      state.sttActive = true;
      updateMicButton();
      recognition.start();
    } else {
      recognition.stop();
    }
  };

  let webcamOn = false;
  webcamBtn.onclick = async () => { 
    if (state.callActive) {
      alert('–ù–µ–ª—å–∑—è –≤–∫–ª—é—á–∏—Ç—å –≤–µ–±-–∫–∞–º–µ—Ä—É –≤–æ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞');
      return;
    }
    
    webcamOn = !webcamOn;
    state.webcamActive = webcamOn;
    updateWebcamButton();
    await onWebcamToggle(webcamOn); 
  };

  // –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞
  let callOn = false;
  callBtn.onclick = async () => {
    if (callOn) {
      // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
      callOn = false;
      state.callActive = false;
      updateCallButton();
      await onCallToggle(false);
    } else {
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      callOn = true;
      state.callActive = true;
      wsConnecting = true;
      updateCallButton();
      
      try {
        await onCallToggle(true);
        wsConnecting = false;
        updateCallButton();
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞:', err);
        wsConnecting = false;
        state.callActive = false;
        state.callActive = false;
        callOn = false;
        updateCallButton();
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.');
      }
    }
  };
}