// digital_avatar/avatar-server/frontend/modules/ui.js

export function setupUI({ onSubmit, onMicText, onWebcamToggle, onCallToggle }) {
  const input = document.getElementById('textInput');
  const sendBtn = document.getElementById('sendBtn');
  const micBtn = document.getElementById('micBtn');
  const emojiSelect = document.getElementById('emojiSelect');
  const webcamBtn = document.getElementById('webcamBtn');
  const callBtn = document.getElementById('callBtn');

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const state = {
    sttActive: false,
    webcamActive: false,
    callActive: false,
    callConnecting: false,
    sttReady: false,
    sttError: null
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º (HTTPS –∏–ª–∏ localhost)
  const isSecureContext = () => {
    return location.protocol === 'https:' || 
           location.hostname === 'localhost' || 
           location.hostname === '127.0.0.1';
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Web Speech API
  const isSpeechRecognitionSupported = () => {
    return 'webkitSpeechRecognition' in window || 'SpeechRecognition' in window;
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
  const isRussianLanguageSupported = () => {
    if (!isSpeechRecognitionSupported()) return false;
    
    try {
      const SR = window.SpeechRecognition || window.webkitSpeechRecognition;
      const recognition = new SR();
      recognition.lang = 'ru-RU';
      return true;
    } catch (e) {
      return false;
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
  const updateMicButton = () => {
    if (!state.sttReady) {
      micBtn.textContent = 'üéôÔ∏è STT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
      micBtn.disabled = true;
      micBtn.title = state.sttError || '–†–µ—á—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞';
      return;
    }
    
    micBtn.disabled = false;
    micBtn.title = '';
    micBtn.textContent = state.sttActive ? 'üõë –°—Ç–æ–ø' : 'üéôÔ∏è –ì–æ–≤–æ—Ä–∏—Ç—å';
    micBtn.classList.toggle('active', state.sttActive);
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –≤–µ–±-–∫–∞–º–µ—Ä—ã
  const updateWebcamButton = () => {
    webcamBtn.textContent = state.webcamActive ? 'üì∑ –í—ã–∫–ª' : 'üì∑ –í–µ–±-–∫–∞–º–µ—Ä–∞';
    webcamBtn.classList.toggle('active', state.webcamActive);
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –∑–≤–æ–Ω–∫–∞
  const updateCallButton = () => {
    if (state.callConnecting) {
      callBtn.textContent = 'üìπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
      callBtn.disabled = true;
    } else {
      callBtn.textContent = state.callActive ? 'üìπ –û—Ç–∫–ª—é—á–∏—Ç—å' : 'üìπ –í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫';
      callBtn.disabled = false;
    }
    callBtn.classList.toggle('active', state.callActive);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
  function setLoadingState(loading) {
    sendBtn.disabled = loading;
    micBtn.disabled = loading || !state.sttReady || state.callConnecting;
    input.disabled = loading;
    sendBtn.textContent = loading ? '‚è≥' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å';
  }

  const handleSubmit = async () => {
    if (input.value.trim()) {
      setLoadingState(true);
      try {
        await onSubmit(input.value.trim());
        input.value = '';
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:', err);
      } finally {
        setLoadingState(false);
      }
    }
  };

  sendBtn.onclick = handleSubmit;
  input.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' && input.value.trim()) {
      handleSubmit();
    }
  });

  emojiSelect.onchange = () => { 
    if (emojiSelect.value) {
      onEmoji(emojiSelect.value);
      emojiSelect.value = '';
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è STT —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫
  const initSpeechRecognition = () => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if (!isSecureContext()) {
      state.sttError = 'Web Speech API —Ç—Ä–µ–±—É–µ—Ç HTTPS (–∫—Ä–æ–º–µ localhost)';
      state.sttReady = false;
      updateMicButton();
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Web Speech API
    if (!isSpeechRecognitionSupported()) {
      state.sttError = 'Web Speech API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ Chrome –∏–ª–∏ Edge.';
      state.sttReady = false;
      updateMicButton();
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    if (!isRussianLanguageSupported()) {
      state.sttError = '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Web Speech API –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ';
      state.sttReady = false;
      updateMicButton();
      return;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
    const SR = window.SpeechRecognition || window.webkitSpeechRecognition;
    const recognition = new SR();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    const langs = ['ru-RU', 'ru'];
    let supportedLang = null;
    
    for (const lang of langs) {
      try {
        recognition.lang = lang;
        supportedLang = lang;
        break;
      } catch (e) {
        continue;
      }
    }
    
    if (!supportedLang) {
      state.sttError = '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Web Speech API';
      state.sttReady = false;
      updateMicButton();
      return;
    }

    recognition.lang = supportedLang;
    recognition.interimResults = true;
    recognition.maxAlternatives = 1;
    recognition.continuous = false; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ—á–∏

    recognition.onresult = (e) => {
      const transcript = Array.from(e.results)
        .map(result => result[0])
        .map(result => result.transcript)
        .join('');
      
      input.value = transcript;
      if (e.results[0].isFinal) {
        handleSubmit();
      }
    };

    recognition.onerror = (e) => {
      console.error('STT error:', e.error);
      
      state.sttActive = false;
      updateMicButton();
      
      // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ audio-capture
      if (e.error === 'audio-capture') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω
        navigator.mediaDevices.enumerateDevices()
          .then(devices => {
            const audioInput = devices.filter(device => 
              device.kind === 'audioinput' && device.deviceId
            );
            
            if (audioInput.length === 0) {
              state.sttError = '–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞.';
            } else {
              state.sttError = '–ú–∏–∫—Ä–æ—Ñ–æ–Ω –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º. –ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω.';
            }
            
            updateMicButton();
          })
          .catch(err => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', err);
            state.sttError = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞.';
            updateMicButton();
          });
      } else if (e.error === 'not-allowed') {
        state.sttError = '–î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∑–∞–ø—Ä–µ—â–µ–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.';
        updateMicButton();
      } else if (e.error === 'service-not-allowed') {
        state.sttError = '–°–µ—Ä–≤–∏—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞.';
        updateMicButton();
      } else if (e.error === 'no-speech') {
        console.log('–ù–µ—Ç —Ä–µ—á–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
      } else if (e.error === 'aborted') {
        console.log('–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ');
      }
    };

    recognition.onend = () => {
      if (state.sttActive) {
        state.sttActive = false;
        updateMicButton();
        
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
        setTimeout(() => {
          if (!state.callActive && !state.callConnecting && !state.sttActive) {
            try {
              recognition.start();
            } catch (e) {
              console.error('–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:', e);
            }
          }
        }, 500);
      }
    };

    // –£—Å–ø–µ—à–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    state.sttReady = true;
    state.sttError = null;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
    navigator.mediaDevices.getUserMedia({ audio: true })
      .then(stream => {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–∞–º –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        stream.getTracks().forEach(track => track.stop());
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        micBtn.onclick = () => {
          if (!state.sttActive) {
            state.sttActive = true;
            updateMicButton();
            
            try {
              recognition.start();
            } catch (e) {
              console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', e);
              state.sttActive = false;
              state.sttError = `–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${e.message}`;
              updateMicButton();
            }
          } else {
            recognition.stop();
          }
        };
        
        updateMicButton();
      })
      .catch(err => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞:', err);
        
        if (err.name === 'NotAllowedError') {
          state.sttError = '–î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∑–∞–ø—Ä–µ—â–µ–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.';
        } else if (err.name === 'NotFoundError' || 
                   err.name === 'DevicesNotFoundError') {
          state.sttError = '–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞.';
        } else if (err.name === 'NotReadableError' || 
                   err.name === 'TrackStartError') {
          state.sttError = '–ú–∏–∫—Ä–æ—Ñ–æ–Ω –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º. –ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω.';
        } else if (err.name === 'OverconstrainedError' || 
                   err.name === 'ConstraintNotSatisfiedError') {
          state.sttError = '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞.';
        } else if (err.name === 'SecurityError' || 
                   err.name === 'PermissionDeniedError') {
          state.sttError = '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É.';
        } else {
          state.sttError = `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${err.name}`;
        }
        
        state.sttReady = false;
        updateMicButton();
      });
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è STT
  initSpeechRecognition();

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥–≤–æ–π–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
  callBtn.onclick = async () => {
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    if (state.callConnecting) return;
    
    if (state.callActive) {
      // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
      state.callActive = false;
      state.callConnecting = true;
      updateCallButton();
      
      try {
        await onCallToggle(false);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞:', err);
        state.callActive = true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      } finally {
        state.callConnecting = false;
        updateCallButton();
      }
    } else {
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      state.callActive = true;
      state.callConnecting = true;
      updateCallButton();
      
      try {
        await onCallToggle(true);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞:', err);
        state.callActive = false;
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.');
      } finally {
        state.callConnecting = false;
        updateCallButton();
      }
    }
  };
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
  updateMicButton();
  updateWebcamButton();
  updateCallButton();
}