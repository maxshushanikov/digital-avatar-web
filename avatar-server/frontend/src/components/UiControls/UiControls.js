//digital_avatar/avatar-server/frontend/src/components/UiControls/UiControls.js
import { connectionState } from '../../stores/session.js';
import { avatarState } from '../../stores/avatar.js';

export function setupUI(handlers) {
  const micBtn = document.getElementById('micBtn');
  const callBtn = document.getElementById('callBtn');
  const webcamBtn = document.getElementById('webcamBtn');
  const emojiSelect = document.getElementById('emojiSelect');
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
  window.uiHandlers = handlers;
  
  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  connectionState.listen((state) => {
    updateButtonStates(state);
  });
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–Ω–æ–ø–æ–∫
  function updateButtonStates(state) {
    webcamBtn.textContent = state.isWebcamActive ? 'üì∑ –í—ã–∫–ª' : 'üì∑ –ö–∞–º–µ—Ä–∞';
    webcamBtn.classList.toggle('active', state.isWebcamActive);
    
    if (state.isCallConnecting) {
      callBtn.textContent = 'üìπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
      callBtn.disabled = true;
    } else {
      callBtn.textContent = state.isCallActive ? 'üìπ –†–∞–∑—ä–µ–¥–∏–Ω–∏—Ç—å' : 'üìπ –ó–≤–æ–Ω–æ–∫';
      callBtn.disabled = false;
      callBtn.classList.toggle('active', state.isCallActive);
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤
  micBtn.addEventListener('click', async () => {
    const isActive = micBtn.classList.contains('active');
    
    try {
      if (isActive) {
        micBtn.classList.remove('active');
        if (handlers.onMicToggle) {
          await handlers.onMicToggle(false);
        }
      } else {
        micBtn.classList.add('active');
        if (handlers.onMicToggle) {
          await handlers.onMicToggle(true);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞:', error);
      micBtn.classList.remove('active');
    }
  });
  
  callBtn.addEventListener('click', async () => {
    const isActive = connectionState.get().isCallActive;
    
    try {
      if (handlers.onCallToggle) {
        await handlers.onCallToggle(!isActive);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞:', error);
    }
  });
  
  webcamBtn.addEventListener('click', async () => {
    const isActive = connectionState.get().isWebcamActive;
    
    try {
      if (handlers.onWebcamToggle) {
        await handlers.onWebcamToggle(!isActive);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã:', error);
    }
  });
  
  emojiSelect.addEventListener('change', () => {
    const emoji = emojiSelect.value;
    if (emoji) {
      // –í—ã–∑–æ–≤ —Ä–µ–∞–∫—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ –Ω–∞ —ç–º–æ–¥–∑–∏
      if (window.avatarController && window.avatarController.emotions) {
        window.avatarController.emotions.reactEmoji(emoji);
      }
      emojiSelect.value = '';
    }
  });
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–Ω–æ–ø–æ–∫
  updateButtonStates(connectionState.get());
}