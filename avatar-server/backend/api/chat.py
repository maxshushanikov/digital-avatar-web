# digital_avatar/avatar-server/backend/api/chat.py
import time
import uuid
from fastapi import APIRouter, HTTPException, Response
from typing import List, Optional
import logging
import os
from urllib.parse import unquote

import httpx
from core.config import settings
from services import llm, chat_history, tts
from models.chat import ChatRequest, ChatResponse, ChatMessage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ (–ø—Ä–µ—Ñ–∏–∫—Å /api –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ main.py)
router = APIRouter()

@router.post("/chat", response_model=ChatResponse)
async def chat_endpoint(request: ChatRequest) -> ChatResponse:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —á–∞—Ç–∞:
    1. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    2. –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞.
    3. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç —É LLM.
    4. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
    5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ (–µ—Å–ª–∏ TTS –¥–æ—Å—Ç—É–ø–µ–Ω).
    6. –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç.
    """
    session_id = request.session_id
    user_message = request.message.strip()

    if not user_message:
        raise HTTPException(status_code=400, detail="–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: session_id={session_id}, message='{user_message[:50]}...'")

    try:
        # --- –®–∞–≥ 1: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
        try:
            chat_history.save_message(session_id, "user", user_message)
            logger.debug("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")

        # --- –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ ---
        try:
            history = chat_history.get_history(session_id, limit=settings.HISTORY_LIMIT)
            logger.debug(f"üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(history)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {e}. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.")
            history = []

        # --- –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM ---
        try:
            assistant_text = await llm.get_llm_response(
                message=user_message,
                history=history,
                system_prompt=request.system_prompt,
                temperature=request.temperature,
                model=request.model
            )
            logger.info(f"üí¨ LLM –æ—Ç–≤–µ—Ç: '{assistant_text[:80]}...'")
        except ConnectionError as e:
            logger.error(f"üîó LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            raise HTTPException(status_code=503, detail="–°–µ—Ä–≤–∏—Å LLM –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            logger.error(f"ü§ñ –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ LLM: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞")

        # --- –®–∞–≥ 4: –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ---
        try:
            chat_history.save_message(session_id, "assistant", assistant_text)
            logger.debug("‚úÖ –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç: {e}")

        # --- –®–∞–≥ 5: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ ---
        audio_url: Optional[str] = None
        if settings.TTS_URL:
            try:
                audio_url = await tts.generate_audio(assistant_text)
                if audio_url:
                    logger.debug(f"üîä –ê—É–¥–∏–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {audio_url}")
                else:
                    logger.debug("üîá –ê—É–¥–∏–æ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ (TTS –≤–µ—Ä–Ω—É–ª None)")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è TTS –Ω–µ —É–¥–∞–ª—Å—è (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ): {e}")

        # --- –®–∞–≥ 6: –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ---
        try:
            # –°–æ–∑–¥–∞—ë–º –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é: —Å—Ç–∞—Ä—ã–µ + –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            full_history = []
            for msg in history:
                # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π
                msg_id = getattr(msg, "id", str(uuid.uuid4()))
                ts_value = getattr(msg, "timestamp", getattr(msg, "ts", time.time()))

                full_history.append(
                    ChatMessage(
                        id=msg_id,
                        role=msg.role,
                        content=msg.content,
                        timestamp=ts_value
                    )
                )

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            new_message_id = str(uuid.uuid4())
            full_history.append(
                ChatMessage(
                    id=new_message_id,
                    role="assistant",
                    content=assistant_text,
                    timestamp=time.time()
                )
            )

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
            full_history.sort(key=lambda x: x.timestamp)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            response = ChatResponse(
                text=assistant_text,
                history=[msg.model_dump() for msg in full_history],  # Pydantic v2
                audio_url=audio_url,
                message_id=new_message_id
            )
            logger.info("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            return response

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}")
            raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç")

    except HTTPException:
        raise
    except Exception as e:
        logger.exception(f"üö® –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ chat_endpoint: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


# === –ü—Ä–æ–∫—Å–∏ –¥–ª—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ TTS (GET /tts-audio/{filename}) ===
@router.get("/tts-audio/{filename:path}")
async def proxy_tts_audio(filename: str):
    """
    –ü—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã —Å TTS-—Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ –Ω–∞—à –±—ç–∫–µ–Ω–¥.
    –†–µ–∞–ª–∏–∑—É–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç path traversal –∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤.
    """
    try:
        # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ URL
        filename = unquote(filename)
        safe_filename = os.path.basename(filename)

        # –ó–∞—â–∏—Ç–∞ –æ—Ç Path Traversal
        if ".." in safe_filename or safe_filename.startswith("."):
            logger.warning(f"üö´ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ñ–∞–π–ª: {filename}")
            raise HTTPException(status_code=400, detail="–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        if not safe_filename.lower().endswith(('.wav', '.mp3', '.ogg')):
            raise HTTPException(status_code=400, detail="–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ")

        # –ó–∞–ø—Ä–æ—Å –∫ TTS-—Å–µ—Ä–≤–µ—Ä—É
        async with httpx.AsyncClient(timeout=10) as client:
            response = await client.get(f"{settings.TTS_URL}/audio/{safe_filename}")
            if response.status_code != 200:
                logger.error(f"‚ùå TTS-—Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª {response.status_code}: {response.text}")
                raise HTTPException(status_code=response.status_code, detail="–û—à–∏–±–∫–∞ TTS")

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Content-Type
            content_type = "audio/wav"
            if safe_filename.endswith(".mp3"):
                content_type = "audio/mpeg"
            elif safe_filename.endswith(".ogg"):
                content_type = "audio/ogg"

            return Response(
                content=response.content,
                media_type=content_type,
                headers={"Content-Disposition": f"inline; filename={safe_filename}"}
            )

    except httpx.RequestError as e:
        logger.error(f"üì° –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ TTS-—Å–µ—Ä–≤–µ—Ä—É: {e}")
        raise HTTPException(status_code=502, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ TTS-—Å–µ—Ä–≤–µ—Ä—É")
    except Exception as e:
        logger.exception(f"üö® –û—à–∏–±–∫–∞ –≤ proxy_tts_audio: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ")