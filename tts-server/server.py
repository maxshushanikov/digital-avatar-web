# digital_avatar/tts-server/server.py
import os
import sys
import hashlib
import traceback
from pathlib import Path

import torch
import soundfile as sf
from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
CACHE_DIR = Path(os.getenv("TTS_CACHE_DIR", "./tts-cache"))
CACHE_DIR.mkdir(parents=True, exist_ok=True)

DEVICE = torch.device('cpu')  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'cuda' –µ—Å–ª–∏ –µ—Å—Ç—å GPU
SPEAKER = os.getenv("TTS_SPEAKER", "aidar")  # aidar, baya, kseniya, xenia, eugene
SAMPLE_RATE = 48000

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –º–æ–¥–µ–ª–∏
_model = None


def normalize_text(text: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return text.strip().lower()


def get_model():
    """–õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ."""
    global _model
    if _model is not None:
        return _model

    print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Silero TTS...")

    try:
        torch.set_num_threads(int(os.getenv("TORCH_NUM_THREADS", "4")))
        
        # –Ø–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        repo_or_dir = 'snakers4/silero-models'
        model, _ = torch.hub.load(
            repo_or_dir=repo_or_dir,
            model='silero_tts',
            language='ru',
            speaker='ru_v3',
            trust_repo=True,
            force_reload=False
        )
        model.to(DEVICE)
        _model = model
        print(f"‚úÖ –ú–æ–¥–µ–ª—å Silero TTS —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ {DEVICE}")
        return _model

    except ModuleNotFoundError as e:
        if "numba" in str(e):
            print("‚ùå –û—à–∏–±–∫–∞: —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ numba. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install numba")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print(traceback.format_exc())
        sys.exit(1)

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {type(e).__name__}: {e}")
        print(traceback.format_exc())
        sys.exit(1)


@app.route("/health", methods=["GET"])
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è TTS-—Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        model = get_model()
        cache_files = len(list(CACHE_DIR.glob("*.wav")))
        return jsonify({
            "status": "healthy",
            "model_loaded": model is not None,
            "cache_size": cache_files,
            "device": str(DEVICE),
            "speaker": SPEAKER,
            "cache_dir": str(CACHE_DIR.absolute())
        }), 200
    except Exception as e:
        return jsonify({
            "status": "error",
            "error": str(e),
            "traceback": traceback.format_exc()
        }), 500


@app.route("/tts", methods=["POST"])
def tts():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    try:
        # –ü–∞—Ä—Å–∏–º JSON
        data = request.get_json()
        if not data:
            return jsonify({"error": "Request must be valid JSON"}), 400

        text = data.get("text", "").strip()
        if not text:
            return jsonify({"error": "–ü–æ–ª–µ 'text' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}), 400

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫—ç—à–∞
        normalized_text = normalize_text(text)
        text_hash = hashlib.sha256(f"silero|{SPEAKER}|{normalized_text}".encode("utf-8")).hexdigest()
        wav_path = CACHE_DIR / f"{text_hash}.wav"

        # –ï—Å–ª–∏ –∞—É–¥–∏–æ —É–∂–µ –µ—Å—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à
        if wav_path.exists():
            print(f"üéß –ö—ç—à –Ω–∞–π–¥–µ–Ω: {text_hash[:8]}... ‚Üí {text}")
        else:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
            model = get_model()
            if model is None:
                return jsonify({"error": "–ú–æ–¥–µ–ª—å TTS –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"}), 500

            print(f"üéôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ: '{text}'")

            try:
                audio = model.apply_tts(
                    text=text + ".",  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∏–Ω—Ç–æ–Ω–∞—Ü–∏–∏
                    speaker=SPEAKER,
                    sample_rate=SAMPLE_RATE,
                    put_accent=True,
                    put_yo=True
                )
                sf.write(str(wav_path), audio.numpy(), SAMPLE_RATE)
                print(f"üíæ –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {wav_path.name}")

            except TypeError as te:
                if "expected np.ndarray" in str(te):
                    print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–π –±–∞–≥ Silero: TypeError –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞")
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ numpy —è–≤–Ω–æ
                    try:
                        audio_np = audio.detach().numpy() if hasattr(audio, 'detach') else audio.numpy()
                        sf.write(str(wav_path), audio_np, SAMPLE_RATE)
                        print("‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
                    except Exception as save_error:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {save_error}")
                        return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—É–¥–∏–æ"}), 500
                else:
                    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π TypeError: {te}")
                    return jsonify({"error": f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(te)}"}), 500

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TTS: {e}")
                print(traceback.format_exc())
                return jsonify({"error": f"TTS generation failed: {str(e)}"}), 500

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL
        audio_url = f"/audio/{wav_path.name}"
        return jsonify({"audio_url": audio_url}), 200

    except Exception as e:
        print(f"‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        print(traceback.format_exc())
        return jsonify({"error": "Internal server error"}), 500


@app.route("/audio/<filename>")
def serve_audio(filename):
    """–û—Ç–¥–∞—ë—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–∑ –∫—ç—à–∞"""
    if ".." in filename or filename.startswith("."):
        return jsonify({"error": "Invalid filename"}), 400

    file_path = CACHE_DIR / filename
    if not file_path.exists():
        return jsonify({"error": "File not found"}), 404

    try:
        return send_from_directory(CACHE_DIR, filename, mimetype="audio/wav")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return jsonify({"error": "Failed to send file"}), 500


if __name__ == "__main__":
    # –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
    print("üöÄ –ó–∞–ø—É—Å–∫ TTS-—Å–µ—Ä–≤–µ—Ä–∞...")
    get_model()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

    host = os.getenv("HOST", "0.0.0.0")
    port = int(os.getenv("PORT", 5002))
    debug = os.getenv("FLASK_DEBUG", "0").lower() in ("1", "true", "on")

    print(f"üåê TTS-—Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç http://{host}:{port}")
    app.run(host=host, port=port, debug=debug)